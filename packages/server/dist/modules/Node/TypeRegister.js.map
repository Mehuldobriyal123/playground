{"version":3,"sources":["../../../src/modules/Node/TypeRegister.ts"],"names":["getTypeRegister","typesLoaders","getTypesLoaders","registerTypeLoader","type","load","name","nodeField","nodesField","nodeInterface","globalId","context","id","obj","constructor"],"mappings":";;;;;;;AAEA;;AAaA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAMC,YAAyB,GAAG,EAAlC;;AAEA,QAAMC,eAAe,GAAG,MAAMD,YAA9B;;AAEA,QAAME,kBAAkB,GAAG,CAACC,IAAD,EAA0BC,IAA1B,KAAyC;AAClEJ,IAAAA,YAAY,CAACG,IAAI,CAACE,IAAN,CAAZ,GAA0B;AACxBF,MAAAA,IADwB;AAExBC,MAAAA;AAFwB,KAA1B;AAKA,WAAOD,IAAP;AACD,GAPD;;AASA,QAAM;AAAEG,IAAAA,SAAF;AAAaC,IAAAA,UAAb;AAAyBC,IAAAA;AAAzB,MAA2C,mCAC/C,CAACC,QAAD,EAAWC,OAAX,KAAuC;AACrC,UAAM;AAAEP,MAAAA,IAAF;AAAQQ,MAAAA;AAAR,QAAe,gCAAaF,QAAb,CAArB;AAEA,UAAM;AAAEL,MAAAA;AAAF,QAAWJ,YAAY,CAACG,IAAD,CAAZ,IAAsB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAvC;AAEA,WAAQA,IAAI,IAAIA,IAAI,CAACM,OAAD,EAAUC,EAAV,CAAb,IAA+B,IAAtC;AACD,GAP8C,EAQ9CC,GAAD,IAAS;AACP,UAAM;AAAET,MAAAA;AAAF,QAAWH,YAAY,CAACY,GAAG,CAACC,WAAJ,CAAgBR,IAAjB,CAAZ,IAAsC;AAAEF,MAAAA,IAAI,EAAE;AAAR,KAAvD;AAEA,WAAOA,IAAP;AACD,GAZ8C,CAAjD;AAeA,SAAO;AACLD,IAAAA,kBADK;AAELD,IAAAA,eAFK;AAGLK,IAAAA,SAHK;AAILC,IAAAA,UAJK;AAKLC,IAAAA;AALK,GAAP;AAOD,CApCD;;AAsCA,MAAM;AACJN,EAAAA,kBADI;AAEJM,EAAAA,aAFI;AAGJF,EAAAA,SAHI;AAIJC,EAAAA;AAJI,IAKFR,eAAe,EALnB","sourcesContent":["import { GraphQLObjectType } from \"graphql\";\n\nimport { fromGlobalId, nodeDefinitions } from \"graphql-relay\";\n\nimport { GraphQLContext } from \"../../types\";\n\ntype Load = (context: GraphQLContext, id: string) => any;\n\ntype TypeLoaders = {\n  [key: string]: {\n    type: GraphQLObjectType;\n    load: Load;\n  };\n};\n\nconst getTypeRegister = () => {\n  const typesLoaders: TypeLoaders = {};\n\n  const getTypesLoaders = () => typesLoaders;\n\n  const registerTypeLoader = (type: GraphQLObjectType, load: Load) => {\n    typesLoaders[type.name] = {\n      type,\n      load,\n    };\n\n    return type;\n  };\n\n  const { nodeField, nodesField, nodeInterface } = nodeDefinitions(\n    (globalId, context: GraphQLContext) => {\n      const { type, id } = fromGlobalId(globalId);\n\n      const { load } = typesLoaders[type] || { load: null };\n\n      return (load && load(context, id)) || null;\n    },\n    (obj) => {\n      const { type } = typesLoaders[obj.constructor.name] || { type: null };\n\n      return type;\n    },\n  );\n\n  return {\n    registerTypeLoader,\n    getTypesLoaders,\n    nodeField,\n    nodesField,\n    nodeInterface,\n  };\n};\n\nconst {\n  registerTypeLoader,\n  nodeInterface,\n  nodeField,\n  nodesField,\n} = getTypeRegister();\n\nexport { registerTypeLoader, nodeInterface, nodeField, nodesField };\n"],"file":"TypeRegister.js"}