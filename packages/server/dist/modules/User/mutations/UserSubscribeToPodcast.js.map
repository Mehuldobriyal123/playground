{"version":3,"sources":["../../../../src/modules/User/mutations/UserSubscribeToPodcast.ts"],"names":["name","inputFields","podcastId","type","GraphQLNonNull","GraphQLString","mutateAndGetPayload","user","error","subscribedToPodcast","subscriptions","includes","message","push","save","outputFields","resolve"],"mappings":";;;;;;;AAAA;;AACA;;;;;;eAQe,gDAA6B;AAC1CA,EAAAA,IAAI,EAAE,wBADoC;AAE1CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE,IAAIC,uBAAJ,CAAmBC,sBAAnB;AADG;AADA,GAF6B;AAO1CC,EAAAA,mBAAmB;AAAA,iCAAE,WACnB;AAAEJ,MAAAA;AAAF,KADmB,EAEnB;AAAEK,MAAAA;AAAF,KAFmB,EAGhB;AACH,UAAI,CAACA,IAAL,EAAW;AACT,eAAO;AACLC,UAAAA,KAAK,EAAE;AADF,SAAP;AAGD;;AAED,YAAMC,mBAAmB,GAAGF,IAAI,CAACG,aAAL,CAAmBC,QAAnB,CAA4BT,SAA5B,CAA5B;;AAEA,UAAIO,mBAAmB,KAAK,IAA5B,EAAkC;AAChC,eAAO;AACLG,UAAAA,OAAO,EAAE,IADJ;AAELJ,UAAAA,KAAK,EAAE;AAFF,SAAP;AAID,OALD,MAKO;AACLD,QAAAA,IAAI,CAACG,aAAL,CAAmBG,IAAnB,CAAwBX,SAAxB;AACA,cAAMK,IAAI,CAACO,IAAL,EAAN;AAEA,eAAO;AACLF,UAAAA,OAAO,EAAE,yBADJ;AAELJ,UAAAA,KAAK,EAAE;AAFF,SAAP;AAID;AACF,KA1BkB;;AAAA;AAAA;AAAA;AAAA,KAPuB;AAkC1CO,EAAAA,YAAY,EAAE;AACZH,IAAAA,OAAO,EAAE;AACPT,MAAAA,IAAI,EAAEE,sBADC;AAEPW,MAAAA,OAAO,EAAE,CAAC;AAAEJ,QAAAA;AAAF,OAAD,KAAiBA;AAFnB,KADG;AAKZJ,IAAAA,KAAK,EAAE;AACLL,MAAAA,IAAI,EAAEE,sBADD;AAELW,MAAAA,OAAO,EAAE,CAAC;AAAER,QAAAA;AAAF,OAAD,KAAeA;AAFnB;AALK;AAlC4B,CAA7B,C","sourcesContent":["import { GraphQLString, GraphQLNonNull } from \"graphql\";\nimport { mutationWithClientMutationId } from \"graphql-relay\";\n\nimport { GraphQLContext } from \"../../../types\";\n\ntype UserSubscribePodcastArgs = {\n  podcastId: string;\n};\n\nexport default mutationWithClientMutationId({\n  name: \"UserSubscribeToPodcast\",\n  inputFields: {\n    podcastId: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  },\n  mutateAndGetPayload: async (\n    { podcastId }: UserSubscribePodcastArgs,\n    { user }: GraphQLContext,\n  ) => {\n    if (!user) {\n      return {\n        error: \"User not authenticated\",\n      };\n    }\n\n    const subscribedToPodcast = user.subscriptions.includes(podcastId as any);\n\n    if (subscribedToPodcast === true) {\n      return {\n        message: null,\n        error: \"Already subscribed to podcast\",\n      };\n    } else {\n      user.subscriptions.push(podcastId as any);\n      await user.save();\n\n      return {\n        message: \"Subscribed successfully\",\n        error: null,\n      };\n    }\n  },\n  outputFields: {\n    message: {\n      type: GraphQLString,\n      resolve: ({ message }) => message,\n    },\n    error: {\n      type: GraphQLString,\n      resolve: ({ error }) => error,\n    },\n  },\n});\n"],"file":"UserSubscribeToPodcast.js"}