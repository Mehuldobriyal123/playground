{"version":3,"sources":["../../../../src/modules/User/mutations/UserSignUpWithEmail.ts"],"names":["name","inputFields","email","type","GraphQLNonNull","GraphQLString","password","mutateAndGetPayload","userExists","UserModel","findOne","trim","toLowerCase","error","user","save","token","success","outputFields","resolve","errorField","successField"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;eAOe,gDAA6B;AAC1CA,EAAAA,IAAI,EAAE,qBADoC;AAE1CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,IAAIC,uBAAJ,CAAmBC,sBAAnB;AADD,KADI;AAIXC,IAAAA,QAAQ,EAAE;AACRH,MAAAA,IAAI,EAAE,IAAIC,uBAAJ,CAAmBC,sBAAnB;AADE;AAJC,GAF6B;AAU1CE,EAAAA,mBAAmB;AAAA,iCAAE,WAAO;AAAEL,MAAAA,KAAF;AAASI,MAAAA;AAAT,KAAP,EAAwD;AAC3E,YAAME,UAAU,SAASC,mBAAUC,OAAV,CAAkB;AACzCR,QAAAA,KAAK,EAAEA,KAAK,CAACS,IAAN,GAAaC,WAAb;AADkC,OAAlB,CAAzB;;AAIA,UAAIJ,UAAJ,EAAgB;AACd,eAAO;AACLK,UAAAA,KAAK,EAAE;AADF,SAAP;AAGD;;AAED,YAAMC,IAAI,SAAS,IAAIL,kBAAJ,CAAc;AAC/BP,QAAAA,KAD+B;AAE/BI,QAAAA;AAF+B,OAAd,EAGhBS,IAHgB,EAAnB;AAKA,aAAO;AACLC,QAAAA,KAAK,EAAE,yBAAcF,IAAd,CADF;AAELG,QAAAA,OAAO,EAAE,yBAFJ;AAGLJ,QAAAA,KAAK,EAAE;AAHF,OAAP;AAKD,KArBkB;;AAAA;AAAA;AAAA;AAAA,KAVuB;AAgC1CK,EAAAA,YAAY;AACVF,IAAAA,KAAK,EAAE;AACLb,MAAAA,IAAI,EAAEE,sBADD;AAELc,MAAAA,OAAO,EAAE,CAAC;AAAEH,QAAAA;AAAF,OAAD,KAAeA;AAFnB;AADG,KAKPI,oBALO,GAMPC,sBANO;AAhC8B,CAA7B,C","sourcesContent":["import { GraphQLString, GraphQLNonNull } from \"graphql\";\nimport { mutationWithClientMutationId } from \"graphql-relay\";\n\nimport { errorField, successField } from \"@playground/graphql\";\n\nimport UserModel from \"../UserModel\";\n\nimport { generateToken } from \"../../../utils/auth\";\n\ntype UserSignUpWithEmailArgs = {\n  email: string;\n  password: string;\n};\n\nexport default mutationWithClientMutationId({\n  name: \"UserSignUpWithEmail\",\n  inputFields: {\n    email: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    password: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  },\n  mutateAndGetPayload: async ({ email, password }: UserSignUpWithEmailArgs) => {\n    const userExists = await UserModel.findOne({\n      email: email.trim().toLowerCase(),\n    });\n\n    if (userExists) {\n      return {\n        error: \"Email is already in use\",\n      };\n    }\n\n    const user = await new UserModel({\n      email,\n      password,\n    }).save();\n\n    return {\n      token: generateToken(user),\n      success: \"Signed up succcessfully\",\n      error: null,\n    };\n  },\n  outputFields: {\n    token: {\n      type: GraphQLString,\n      resolve: ({ token }) => token,\n    },\n    ...errorField,\n    ...successField,\n  },\n});\n"],"file":"UserSignUpWithEmail.js"}