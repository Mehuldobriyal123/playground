{"version":3,"sources":["../../../../src/modules/User/mutations/UserSignInWithEmail.ts"],"names":["name","inputFields","email","type","GraphQLNonNull","GraphQLString","password","mutateAndGetPayload","user","UserModel","findOne","trim","toLowerCase","error","correctPassword","authenticate","token","success","outputFields","resolve","errorField","successField"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;eAOe,gDAA6B;AAC1CA,EAAAA,IAAI,EAAE,qBADoC;AAE1CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,IAAIC,uBAAJ,CAAmBC,sBAAnB;AADD,KADI;AAIXC,IAAAA,QAAQ,EAAE;AACRH,MAAAA,IAAI,EAAE,IAAIC,uBAAJ,CAAmBC,sBAAnB;AADE;AAJC,GAF6B;AAU1CE,EAAAA,mBAAmB;AAAA,iCAAE,WAAO;AAAEL,MAAAA,KAAF;AAASI,MAAAA;AAAT,KAAP,EAAwD;AAC3E,YAAME,IAAI,SAASC,mBAAUC,OAAV,CAAkB;AAAER,QAAAA,KAAK,EAAEA,KAAK,CAACS,IAAN,GAAaC,WAAb;AAAT,OAAlB,CAAnB;;AAEA,UAAI,CAACJ,IAAL,EAAW;AACT,eAAO;AACLK,UAAAA,KAAK,EAAE;AADF,SAAP;AAGD;;AAED,YAAMC,eAAe,SAASN,IAAI,CAACO,YAAL,CAAkBT,QAAlB,CAA9B;;AAEA,UAAI,CAACQ,eAAL,EAAsB;AACpB,eAAO;AACLD,UAAAA,KAAK,EAAE;AADF,SAAP;AAGD;;AAED,aAAO;AACLG,QAAAA,KAAK,EAAE,yBAAcR,IAAd,CADF;AAELS,QAAAA,OAAO,EAAE,wBAFJ;AAGLJ,QAAAA,KAAK,EAAE;AAHF,OAAP;AAKD,KAtBkB;;AAAA;AAAA;AAAA;AAAA,KAVuB;AAiC1CK,EAAAA,YAAY;AACVF,IAAAA,KAAK,EAAE;AACLb,MAAAA,IAAI,EAAEE,sBADD;AAELc,MAAAA,OAAO,EAAE,CAAC;AAAEH,QAAAA;AAAF,OAAD,KAAeA;AAFnB;AADG,KAKPI,kBALO,GAMPC,oBANO;AAjC8B,CAA7B,C","sourcesContent":["import { GraphQLString, GraphQLNonNull } from \"graphql\";\nimport { mutationWithClientMutationId } from \"graphql-relay\";\n\nimport { errorField, successField } from \"../../../common\";\n\nimport UserModel from \"../UserModel\";\n\nimport { generateToken } from \"../../../utils/auth\";\n\ntype UserSignInWithEmailArgs = {\n  email: string;\n  password: string;\n};\n\nexport default mutationWithClientMutationId({\n  name: \"UserSignInWithEmail\",\n  inputFields: {\n    email: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    password: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  },\n  mutateAndGetPayload: async ({ email, password }: UserSignInWithEmailArgs) => {\n    const user = await UserModel.findOne({ email: email.trim().toLowerCase() });\n\n    if (!user) {\n      return {\n        error: \"User doesn't exist\",\n      };\n    }\n\n    const correctPassword = await user.authenticate(password);\n\n    if (!correctPassword) {\n      return {\n        error: \"Invalid password\",\n      };\n    }\n\n    return {\n      token: generateToken(user),\n      success: \"Logged in successfully\",\n      error: null,\n    };\n  },\n  outputFields: {\n    token: {\n      type: GraphQLString,\n      resolve: ({ token }) => token,\n    },\n    ...errorField,\n    ...successField,\n  },\n});\n"],"file":"UserSignInWithEmail.js"}