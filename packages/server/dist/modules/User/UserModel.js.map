{"version":3,"sources":["../../../src/modules/User/UserModel.ts"],"names":["ObjectId","mongoose","Schema","Types","UserSchema","email","type","String","trim","required","lowercase","password","hidden","minlength","subscriptions","ref","description","timestamps","createdAt","updatedAt","collection","pre","next","isModified","bcrypt","hash","then","methods","authenticate","plainTextPassword","compareSync","encryptPassword","hashSync","UserModel","model"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,kBAASC,MAAT,CAAgBC,KAArC;AAEA,MAAMC,UAAU,GAAG,IAAIF,gBAAJ,CACjB;AACEG,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,IAAI,EAAE,IAFD;AAGLC,IAAAA,QAAQ,EAAE,IAHL;AAILC,IAAAA,SAAS,EAAE;AAJN,GADT;AAOEC,EAAAA,QAAQ,EAAE;AACRL,IAAAA,IAAI,EAAEC,MADE;AAERK,IAAAA,MAAM,EAAE,IAFA;AAGRH,IAAAA,QAAQ,EAAE,IAHF;AAIRI,IAAAA,SAAS,EAAE;AAJH,GAPZ;AAaEC,EAAAA,aAAa,EAAE,CACb;AACER,IAAAA,IAAI,EAAEN,QADR;AAEEe,IAAAA,GAAG,EAAE,SAFP;AAGEC,IAAAA,WAAW,EAAE;AAHf,GADa;AAbjB,CADiB,EAsBjB;AACEC,EAAAA,UAAU,EAAE;AACVC,IAAAA,SAAS,EAAE,WADD;AAEVC,IAAAA,SAAS,EAAE;AAFD,GADd;AAKEC,EAAAA,UAAU,EAAE;AALd,CAtBiB,CAAnB;AAyCAhB,UAAU,CAACiB,GAAX,CAAsB,MAAtB,EAA8B,UAAUC,IAAV,EAAgB;AAC5C,MAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC,OAAOD,IAAI,EAAX;AAClC,MAAI,CAAC,KAAKX,QAAV,EAAoB,OAAOW,IAAI,EAAX;AACpB,SAAOE,gBAAOC,IAAP,CAAY,KAAKd,QAAjB,EAA2B,CAA3B,EAA8Be,IAA9B,CAAoCD,IAAD,IAAkB;AAC1D,SAAKd,QAAL,GAAgBc,IAAhB;AACAH,IAAAA,IAAI;AACL,GAHM,CAAP;AAID,CAPD;AASAlB,UAAU,CAACuB,OAAX,GAAqB;AACnBC,EAAAA,YAAY,CAACC,iBAAD,EAA4B;AACtC,WAAOL,gBAAOM,WAAP,CAAmBD,iBAAnB,EAAsC,KAAKlB,QAA3C,CAAP;AACD,GAHkB;;AAInBoB,EAAAA,eAAe,CAACpB,QAAD,EAAmB;AAChC,WAAOa,gBAAOQ,QAAP,CAAgBrB,QAAhB,EAA0B,CAA1B,CAAP;AACD;;AANkB,CAArB;;AASA,MAAMsB,SAAuB,GAAGhC,kBAASiC,KAAT,CAAe,MAAf,EAAuB9B,UAAvB,CAAhC;;eAEe6B,S","sourcesContent":["import mongoose, { Schema, Document, Model, Types } from \"mongoose\";\nimport bcrypt from \"bcrypt\";\n\nconst { ObjectId } = mongoose.Schema.Types;\n\nconst UserSchema = new Schema(\n  {\n    email: {\n      type: String,\n      trim: true,\n      required: true,\n      lowercase: true,\n    },\n    password: {\n      type: String,\n      hidden: true,\n      required: true,\n      minlength: 3,\n    },\n    subscriptions: [\n      {\n        type: ObjectId,\n        ref: \"Podcast\",\n        description: \"Podcast that user is subscribed\",\n      },\n    ],\n  },\n  {\n    timestamps: {\n      createdAt: \"createdAt\",\n      updatedAt: \"updatedAt\",\n    },\n    collection: \"User\",\n  },\n);\n\nexport interface IUser extends Document {\n  email: string;\n  password: string;\n  subscriptions: Array<Types.ObjectId>;\n  createdAt: Date;\n  updatedAt: Date;\n  authenticate: (plainTextPassword: string) => boolean;\n  encryptPassword: (password: string | undefined) => Promise<string>;\n}\n\nUserSchema.pre<IUser>(\"save\", function (next) {\n  if (!this.isModified(\"password\")) return next();\n  if (!this.password) return next();\n  return bcrypt.hash(this.password, 8).then((hash: string) => {\n    this.password = hash;\n    next();\n  });\n});\n\nUserSchema.methods = {\n  authenticate(plainTextPassword: string) {\n    return bcrypt.compareSync(plainTextPassword, this.password);\n  },\n  encryptPassword(password: string) {\n    return bcrypt.hashSync(password, 8);\n  },\n};\n\nconst UserModel: Model<IUser> = mongoose.model(\"User\", UserSchema);\n\nexport default UserModel;\n"],"file":"UserModel.js"}