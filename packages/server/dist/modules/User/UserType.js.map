{"version":3,"sources":["../../../src/modules/User/UserType.ts"],"names":["UserType","GraphQLObjectType","name","description","fields","id","mongooseIDResolver","email","type","GraphQLString","resolve","createdAt","obj","toISOString","updatedAt","interfaces","nodeInterface","load","UserConnection","nodeType"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AAMA,MAAMA,QAA2B,GAAG,IAAIC,0BAAJ,CAGlC;AACAC,EAAAA,IAAI,EAAE,MADN;AAEAC,EAAAA,WAAW,EAAE,UAFb;AAGAC,EAAAA,MAAM,EAAE;AACNC,IAAAA,EAAE,EAAE,iCAAc,MAAd;AADE,KAEHC,0BAFG;AAGNC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,6BAAeC,sBAAf,CADD;AAELC,MAAAA,OAAO,EAAE,CAAC;AAAEH,QAAAA;AAAF,OAAD,KAAeA;AAFnB,KAHD;AAONI,IAAAA,SAAS,EAAE;AACTH,MAAAA,IAAI,EAAEC,sBADG;AAETC,MAAAA,OAAO,EAAGE,GAAD,IAAUA,GAAG,CAACD,SAAJ,GAAgBC,GAAG,CAACD,SAAJ,CAAcE,WAAd,EAAhB,GAA8C;AAFxD,KAPL;AAWNC,IAAAA,SAAS,EAAE;AACTN,MAAAA,IAAI,EAAEC,sBADG;AAETC,MAAAA,OAAO,EAAGE,GAAD,IAAUA,GAAG,CAACE,SAAJ,GAAgBF,GAAG,CAACE,SAAJ,CAAcD,WAAd,EAAhB,GAA8C;AAFxD;AAXL,IAHR;AAmBAE,EAAAA,UAAU,EAAE,MAAM,CAACC,2BAAD;AAnBlB,CAHkC,CAApC;eAyBehB,Q;;AAEf,sCAAmBA,QAAnB,EAA6BiB,gBAA7B;AAEO,MAAMC,cAAc,GAAG,mCAAsB;AAClDhB,EAAAA,IAAI,EAAE,MAD4C;AAElDiB,EAAAA,QAAQ,EAAEnB;AAFwC,CAAtB,CAAvB","sourcesContent":["import { GraphQLObjectType, GraphQLString, GraphQLNonNull } from \"graphql\";\nimport { globalIdField } from \"graphql-relay\";\n\nimport { connectionDefinitions, mongooseIDResolver } from \"../../common\";\n\nimport { load } from \"./UserLoader\";\n\nimport { nodeInterface, registerTypeLoader } from \"../Node/TypeRegister\";\n\nimport { IUser } from \"./UserModel\";\n\nimport { GraphQLContext } from \"../../types\";\n\nconst UserType: GraphQLObjectType = new GraphQLObjectType<\n  IUser,\n  GraphQLContext\n>({\n  name: \"User\",\n  description: \"UserType\",\n  fields: () => ({\n    id: globalIdField(\"User\"),\n    ...mongooseIDResolver,\n    email: {\n      type: GraphQLNonNull(GraphQLString),\n      resolve: ({ email }) => email,\n    },\n    createdAt: {\n      type: GraphQLString,\n      resolve: (obj) => (obj.createdAt ? obj.createdAt.toISOString() : null),\n    },\n    updatedAt: {\n      type: GraphQLString,\n      resolve: (obj) => (obj.updatedAt ? obj.updatedAt.toISOString() : null),\n    },\n  }),\n  interfaces: () => [nodeInterface],\n});\n\nexport default UserType;\n\nregisterTypeLoader(UserType, load);\n\nexport const UserConnection = connectionDefinitions({\n  name: \"User\",\n  nodeType: UserType,\n});\n"],"file":"UserType.js"}