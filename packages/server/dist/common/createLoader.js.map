{"version":3,"sources":["../../src/common/createLoader.ts"],"names":["defaultViewerCanSee","context","data","createLoader","model","viewerCanSee","loaderName","filterMapping","Loader","constructor","Object","keys","map","key","id","_id","nameIt","name","cls","Wrapper","collection","collectionName","getLoader","DataLoader","ids","load","dataloaders","toString","filteredData","err","clearCache","clear","loadAll","args","builtMongoConditions","filters","conditions","sort","createdAt"],"mappings":";;;;;;;AAAA;;AACA;;AAIA;;AAKA;;;;;;;;;;;;;;AAEA,MAAMA,mBAAmB,GAAG,CAC1BC,OAD0B,EAE1BC,IAF0B,KAGhBA,IAHZ;;AA6BO,MAAMC,YAAY,GAAG,CAI1B;AACAC,EAAAA,KADA;AAEAC,EAAAA,YAAY,GAAGL,mBAFf;AAGAM,EAAAA,UAHA;AAIAC,EAAAA,aAAa,GAAG;AAJhB,CAJ0B,KASwB;AAClD,QAAMC,MAAN,CAAa;AAEXC,IAAAA,WAAW,CAACP,IAAD,EAAc;AACvBQ,MAAAA,MAAM,CAACC,IAAP,CAAYT,IAAZ,EAAkBU,GAAlB,CAAuBC,GAAD,IAAS;AAC7B,aAAKA,GAAL,IAAaX,IAAD,CAAcW,GAAd,CAAZ;AACD,OAFD;AAGA,WAAKC,EAAL,GAAUZ,IAAI,CAACY,EAAL,IAAWZ,IAAI,CAACa,GAA1B;AACD;;AAPU;;AAUb,QAAMC,MAAM,GAAG,CAACC,IAAD,EAAeC,GAAf,KACZ;AAAE,KAACD,IAAD,GAAQ,cAAcC,GAAd,CAAkB;AAA5B,KAAiCD,IAAjC,CADH;;AAGA,QAAME,OAAO,GAAGH,MAAM,CAACZ,KAAK,CAACgB,UAAN,CAAiBC,cAAlB,EAAkCb,MAAlC,CAAtB;;AAEA,QAAMc,SAAS,GAAG,MAChB,IAAIC,mBAAJ,CAA+BC,GAAD,IAAS,2CAAepB,KAAf,EAAsBoB,GAAtB,CAAvC,CADF;;AAGA,QAAMC,IAAI;AAAA,iCAAG,WAAOxB,OAAP,EAAyBa,EAAzB,EAA+C;AAC1D,UAAI,CAACA,EAAL,EAAS;AACP,eAAO,IAAP;AACD;;AAED,UAAI;AACF,cAAMZ,IAAI,SAASD,OAAO,CAACyB,WAAR,CAAoBpB,UAApB,EAAgCmB,IAAhC,CAAqCX,EAAE,CAACa,QAAH,EAArC,CAAnB;;AAEA,YAAI,CAACzB,IAAL,EAAW;AACT,iBAAO,IAAP;AACD;;AAED,cAAM0B,YAAY,SAASvB,YAAY,CAACJ,OAAD,EAAUC,IAAV,CAAvC;AAEA,eAAO0B,YAAY,GAAI,IAAIT,OAAJ,CAAYS,YAAZ,CAAJ,GAA0C,IAA7D;AACD,OAVD,CAUE,OAAOC,GAAP,EAAY;AACZ,eAAO,IAAP;AACD;AACF,KAlBS;;AAAA,oBAAJJ,IAAI;AAAA;AAAA;AAAA,KAAV;;AAoBA,QAAMK,UAAU,GAAG,CAAC;AAAEJ,IAAAA;AAAF,GAAD,EAA2BZ,EAA3B,KACjBY,WAAW,CAACpB,UAAD,CAAX,CAAwByB,KAAxB,CAA8BjB,EAAE,CAACa,QAAH,EAA9B,CADF;;AAGA,QAAMK,OAAO,GAAG,gDACd5B,KADc,EAEdqB,IAFc,EAGd,CAACxB,OAAD,EAAmBgC,IAAnB,KAAyD;AACvD,UAAMC,oBAAoB,GAAG,0DAC3BjC,OAD2B,EAE3BgC,IAAI,CAACE,OAFsB,EAG3B5B,aAH2B,CAA7B;;AAMA,UAAM6B,UAAU,qBACXF,oBAAoB,CAACE,UADV,CAAhB;;AAIA,UAAMC,IAAI,GAAG;AACXC,MAAAA,SAAS,EAAE,CAAC;AADD,KAAb;AAIA,WAAO;AACLF,MAAAA,UADK;AAELC,MAAAA;AAFK,KAAP;AAID,GAtBa,CAAhB;AAyBA,SAAO;AACLlB,IAAAA,OAAO,EAAEA,OADJ;AAILG,IAAAA,SAJK;AAKLQ,IAAAA,UALK;AAMLL,IAAAA,IANK;AAOLO,IAAAA;AAPK,GAAP;AASD,CArFM","sourcesContent":["import { mongooseLoader } from \"@entria/graphql-mongoose-loader\";\nimport DataLoader from \"dataloader\";\nimport { ConnectionArguments } from \"graphql-relay\";\nimport { Model, Types, Document } from \"mongoose\";\n\nimport {\n  buildMongoConditionsFromFilters,\n  GraphQLFilter,\n} from \"@entria/graphql-mongo-helpers\";\n\nimport { withConnectionCursor } from \"./withConnectionCursor\";\n\nconst defaultViewerCanSee = <Value extends Document>(\n  context: BaseContext<string, Value>,\n  data: Value\n): Value => data;\n\nexport type DataLoaderKey = string | Types.ObjectId;\n\nexport interface BaseContext<\n  LoaderName extends string,\n  Value extends Document\n> {\n  dataloaders: Record<LoaderName, DataLoader<string, Value>>;\n}\n\nexport type CreateLoaderArgs<\n  Context extends BaseContext<LoaderName, Value>,\n  LoaderName extends string,\n  Value extends Document\n> = {\n  model: Model<Value>;\n  viewerCanSee?: (context: Context, data: Value) => Value | Promise<Value>;\n  loaderName: LoaderName;\n  filterMapping?: object;\n};\n\nexport interface FilteredConnectionArguments extends ConnectionArguments {\n  filters: GraphQLFilter | null;\n}\n\nexport const createLoader = <\n  Context extends BaseContext<LoaderName, Value>,\n  LoaderName extends string,\n  Value extends Document\n>({\n  model,\n  viewerCanSee = defaultViewerCanSee,\n  loaderName,\n  filterMapping = {},\n}: CreateLoaderArgs<Context, LoaderName, Value>) => {\n  class Loader {\n    [key: string]: any;\n    constructor(data: Value) {\n      Object.keys(data).map((key) => {\n        this[key] = (data as any)[key];\n      });\n      this.id = data.id || data._id;\n    }\n  }\n\n  const nameIt = (name: string, cls: typeof Loader): typeof Loader =>\n    ({ [name]: class extends cls {} }[name]);\n\n  const Wrapper = nameIt(model.collection.collectionName, Loader);\n\n  const getLoader = () =>\n    new DataLoader<string, Value>((ids) => mongooseLoader(model, ids));\n\n  const load = async (context: Context, id: DataLoaderKey) => {\n    if (!id) {\n      return null;\n    }\n\n    try {\n      const data = await context.dataloaders[loaderName].load(id.toString());\n\n      if (!data) {\n        return null;\n      }\n\n      const filteredData = await viewerCanSee(context, data);\n\n      return filteredData ? (new Wrapper(filteredData) as Value) : null;\n    } catch (err) {\n      return null;\n    }\n  };\n\n  const clearCache = ({ dataloaders }: Context, id: string) =>\n    dataloaders[loaderName].clear(id.toString());\n\n  const loadAll = withConnectionCursor(\n    model,\n    load,\n    (context: Context, args: FilteredConnectionArguments) => {\n      const builtMongoConditions = buildMongoConditionsFromFilters(\n        context,\n        args.filters,\n        filterMapping as any\n      );\n\n      const conditions = {\n        ...builtMongoConditions.conditions,\n      };\n\n      const sort = {\n        createdAt: -1,\n      };\n\n      return {\n        conditions,\n        sort,\n      };\n    }\n  );\n\n  return {\n    Wrapper: Wrapper as {\n      new (value: Value): Value;\n    },\n    getLoader,\n    clearCache,\n    load,\n    loadAll,\n  };\n};\n"],"file":"createLoader.js"}