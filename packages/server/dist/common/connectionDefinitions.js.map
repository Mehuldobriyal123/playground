{"version":3,"sources":["../../src/common/connectionDefinitions.ts"],"names":["forwardConnectionArgs","after","type","GraphQLString","first","GraphQLInt","backwardConnectionArgs","before","last","connectionArgs","pageInfoType","GraphQLObjectType","name","description","fields","hasNextPage","GraphQLBoolean","hasPreviousPage","startCursor","endCursor","resolveMaybeThunk","thingOrThunk","connectionDefinitions","config","nodeType","resolveCursor","resolveNode","edgeFields","connectionFields","edgeType","node","resolve","cursor","connectionType","count","totalCount","connection","startCursorOffset","endCursorOffset","pageInfo","edges"],"mappings":"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","sourcesContent":["import {\n  GraphQLBoolean,\n  GraphQLFieldConfigArgumentMap,\n  GraphQLFieldConfigMap,\n  GraphQLFieldResolver,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n  Thunk,\n} from \"graphql\";\n\nexport const forwardConnectionArgs: GraphQLFieldConfigArgumentMap = {\n  after: {\n    type: GraphQLString,\n  },\n  first: {\n    type: GraphQLInt,\n  },\n};\n\nexport const backwardConnectionArgs: GraphQLFieldConfigArgumentMap = {\n  before: {\n    type: GraphQLString,\n  },\n  last: {\n    type: GraphQLInt,\n  },\n};\n\nexport const connectionArgs: GraphQLFieldConfigArgumentMap = {\n  ...forwardConnectionArgs,\n  ...backwardConnectionArgs,\n};\n\ntype ConnectionConfig = {\n  name?: string | null;\n  nodeType: GraphQLObjectType;\n  resolveNode?: GraphQLFieldResolver<any, any> | null;\n  resolveCursor?: GraphQLFieldResolver<any, any> | null;\n  edgeFields?: Thunk<GraphQLFieldConfigMap<any, any>> | null;\n  connectionFields?: Thunk<GraphQLFieldConfigMap<any, any>> | null;\n};\n\nexport type GraphQLConnectionDefinitions = {\n  edgeType: GraphQLObjectType;\n  connectionType: GraphQLObjectType;\n};\n\nconst pageInfoType = new GraphQLObjectType({\n  name: \"PageInfoExtended\",\n  description: \"Information about pagination in a connection.\",\n  fields: () => ({\n    hasNextPage: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: \"When paginating forwards, are there more items?\",\n    },\n    hasPreviousPage: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: \"When paginating backwards, are there more items?\",\n    },\n    startCursor: {\n      type: GraphQLString,\n      description: \"When paginating backwards, the cursor to continue.\",\n    },\n    endCursor: {\n      type: GraphQLString,\n      description: \"When paginating forwards, the cursor to continue.\",\n    },\n  }),\n});\n\nfunction resolveMaybeThunk<T>(thingOrThunk: Thunk<T>): T {\n  return typeof thingOrThunk === \"function\"\n    ? (thingOrThunk as () => T)()\n    : thingOrThunk;\n}\n\nexport function connectionDefinitions(\n  config: ConnectionConfig\n): GraphQLConnectionDefinitions {\n  const { nodeType, resolveCursor, resolveNode } = config;\n  const name = config.name || nodeType.name;\n  const edgeFields = config.edgeFields || {};\n  const connectionFields = config.connectionFields || {};\n\n  const edgeType = new GraphQLObjectType({\n    name: `${name}Edge`,\n    description: \"An edge in a connection.\",\n    fields: () => ({\n      node: {\n        type: nodeType,\n        resolve: resolveNode,\n        description: \"The item at the end of the edge\",\n      },\n      cursor: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: resolveCursor,\n        description: \"A cursor for use in pagination\",\n      },\n      ...(resolveMaybeThunk(edgeFields) as any),\n    }),\n  });\n\n  const connectionType = new GraphQLObjectType({\n    name: `${name}Connection`,\n    description: \"A connection to a list of items.\",\n    fields: () => ({\n      count: {\n        type: GraphQLInt,\n        description: \"Number of items in this connection\",\n      },\n      totalCount: {\n        type: GraphQLInt,\n        resolve: (connection) => connection.count,\n        description: `A count of the total number of objects in this connection, ignoring pagination.\n  This allows a client to fetch the first five objects by passing \"5\" as the\n  argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n  for example.`,\n      },\n      startCursorOffset: {\n        type: GraphQLNonNull(GraphQLInt),\n        description: \"Offset from start\",\n      },\n      endCursorOffset: {\n        type: GraphQLNonNull(GraphQLInt),\n        description: \"Offset till end\",\n      },\n      pageInfo: {\n        type: GraphQLNonNull(pageInfoType),\n        description: \"Information to aid in pagination.\",\n      },\n      edges: {\n        type: GraphQLNonNull(GraphQLList(edgeType)),\n        description: \"A list of edges.\",\n      },\n      ...(resolveMaybeThunk(connectionFields) as any),\n    }),\n  });\n\n  return { edgeType, connectionType };\n}\n"],"file":"connectionDefinitions.js"}