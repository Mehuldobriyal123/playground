"""Query"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  currentUser: User
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""UserType"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  email: String!
  createdAt: String
  updatedAt: String
}

type Mutation {
  UserSignInWithEmail(input: UserSignInWithEmailInput!): UserSignInWithEmailPayload
  UserSignUpWithEmail(input: UserSignUpWithEmailInput!): UserSignUpWithEmailPayload
  UserChangePassword(input: UserChangePasswordInput!): UserChangePasswordPayload
}

type UserSignInWithEmailPayload {
  token: String
  error: String
  success: String
  clientMutationId: String
}

input UserSignInWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserSignUpWithEmailPayload {
  token: String
  error: String
  success: String
  clientMutationId: String
}

input UserSignUpWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserChangePasswordPayload {
  error: String
  success: String
  clientMutationId: String
}

input UserChangePasswordInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}
