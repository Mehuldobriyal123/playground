{"version":3,"sources":["../src/withConnectionCursor.ts"],"names":["withConnectionCursor","model","loader","condFn","params","conditions","sort","context","args","cursor","find"],"mappings":";;;;;;;AAAA;;AAUO,MAAMA,oBAAoB,GAAG,CAClCC,KADkC,EAElCC,MAFkC,EAGlCC,MAHkC,KAI/B,CAAC,GAAGC,MAAJ,KAAsB;AACzB,QAAM;AAAEC,IAAAA,UAAU,GAAG,EAAf;AAAmBC,IAAAA,IAAI,GAAG;AAA1B,MAAiCH,MAAM,CAAC,GAAGC,MAAJ,CAA7C;AAEA,QAAM,CAACG,OAAD,EAAUC,IAAV,IAAkBJ,MAAxB;AAEA,QAAMK,MAAM,GAAGR,KAAK,CAACS,IAAN,CAAWL,UAAX,EAAuBC,IAAvB,CAA4BA,IAA5B,CAAf;AAEA,SAAO,sDAA0B;AAC/BG,IAAAA,MAD+B;AAE/BF,IAAAA,OAF+B;AAG/BC,IAAAA,IAH+B;AAI/BN,IAAAA,MAAM,EAAEA;AAJuB,GAA1B,CAAP;AAMD,CAjBM","sourcesContent":["import { connectionFromMongoCursor } from \"@entria/graphql-mongoose-loader\";\nimport { Model } from \"mongoose\";\n\nimport { DataLoaderKey } from \"./createLoader\";\n\nexport type LoaderFn<Context extends object> = (\n  ctx: Context,\n  id: DataLoaderKey\n) => any;\n\nexport const withConnectionCursor = <Context extends object>(\n  model: Model<any>,\n  loader: LoaderFn<Context>,\n  condFn: (...p: any[]) => { conditions?: object; sort?: object }\n) => (...params: any[]) => {\n  const { conditions = {}, sort = {} } = condFn(...params);\n\n  const [context, args] = params;\n\n  const cursor = model.find(conditions).sort(sort);\n\n  return connectionFromMongoCursor({\n    cursor,\n    context,\n    args,\n    loader: loader as any,\n  });\n};\n"],"file":"withConnectionCursor.js"}